----Naloga 1:----


movs r0, #0 	@ Stanje zastavic Z = 1, C = 0, V = 0, N = 0
		@ Stevilo je 0, zato je Z = 1, ni bilo aritmetiƒçnih operacij zato C in V = 0
	    	@ Stevilo ni negativno zato je N = 0

subs r0, r0, #1 @ Stanje zastavic Z = 0, C = 0, V = 0, N = 1
		@ Stevilo ni 0, zato Z = 0, C = 0 zato ker nismo pristevali, V = 0 zato ker imamo dovolj bitov da shranimo rezultat
		@ Stevilo je negativno zato je N = 1
		@ Nepredznaceno je vrednost 4294967295
		@ Predznaceno je vrednost -1

adds r0, r0, #2	@ Stanje zastavic Z = 0, C = 1, V = 0, N = 0
		@ Stevilo ni 0, zato Z = 0, C = 1, ker smo pristevali najvecjemu moznemu st., V = 0 ker imamo dovolj bitov da shranimo
		@ rezultat, stevilo ni negativno zato N = 0
		@ Nepredznaceno je vrednost 1, ampak Carry = 1
		@ Predznaceno je vrednost 1





----Naloga 2:----


          .text

NIZ:      .ascii "ABRAKADABRA"  @ znakovni niz

          .byte 0 @ zakljucna nicla

CHR:      .byte 'R'


          .align
          .global __start
__start:
           mov r0, #0 @ Index of last occurence
           
           adr r1, CHR
           ldrb r2, [r1]
           
           adr r1, NIZ
           
           mov r4, #1
           
LOOP:
           ldrb r3, [r1]
           
           add r1, r1, #1
           
           cmp r3, r2
           
           moveq r0, r4
           add r4, r4, #1
           
           cmp r3, #0
           bne LOOP


__end:    b __end   



----Naloga 3:----


          .text

niz1:     .asciz "Prvi niz"   @ prvi niz

niz2:     .asciz "Drugi niz_" @ drugi niz

          .space 40           @ prostor za daljsi niz

          .align
          .global __start
__start:
           adr r0, niz1
           adr r1, niz2
           
FIND_END_LOOP:                @ Loop through string to find 0

           ldrb r3, [r1]
           
           cmp r3, #0
           
           addne r1, r1, #1   @ If not 0 move to next element
           
           bne FIND_END_LOOP
           

COPY_LOOP:                    @ Loop through string and copy character 
           ldrb r4, [r0], #1  @ Load character and move forward
           
           strb r4, [r1], #1  @ Store character and move forward
           
           cmp r4, #0         @ Check if end of second string
           streqb r4, [r1]    @ If end of string copy ending zero
           bne COPY_LOOP
          


__end:    b __end  




